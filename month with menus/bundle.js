(function (React$1, ReactDOM, d3, ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl =
    'https://gist.githubusercontent.com/TaylorW43/25908e7fbe9def43d82d879c774e531d/raw/a1fa5da0dbedd7bfb653d0e75da660ea0db93830/clean.csv';

  //const start_year = 1957;
  //const end_year = 2020;
  //const num_years = end_year - start_year;

  //var sum_by_year = new Array(num_years).fill(0);

  //console.log(num_years);
  //console.log(sum_by_year);

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = (d) => {
        /*test
        if(d.Year==='1957')
        {
        	//console.log('true');
        }
        */
        /*
        var count=0;
        for(var i=0;i<num_years;i++)
        {
          //console.log(i);
        	if(d.Year==(i+1957))
          {
            count+=1;
          	console.log(count);
            
          }
        }
        */

        d.Year = +d.Year;
        d.Month = +d.Month;

        //console.log(d.Year);
        //console.log(d['Year']);

        /*
        d.test =+d.Year;
        console.log(d.test);
        */
        
   			
        if(d.Year>='1957' && d.Year<='1970')
        {
        	d.first_group=+d.Year;
        }
        
        if(d.Year>='1970' && d.Year<='1983')
        {
        	d.second_group=+d.Year;
        }
        
        if(d.Year>='1983' && d.Year<='1996')
        {
        	d.third_group=+d.Year;
        }
        
        if(d.Year>='1996' && d.Year<='2009')
        {
        	d.fourth_group=+d.Year;
        }
        
        if(d.Year>='2009' && d.Year<='2020')
        {
        	d.fifth_group=+d.Year;
        }
        
        //console.log(d.Year);
        //console.log(d.first_group);
        //console.log(d.second_group);
        //console.log(d.third_group);
        //console.log(d.fourth_group);
        //console.log(d.fifth_group);
        
        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);
    

    //console.log(data);
    return data;
  };

  const AxisBottom = ({ xScale, innerHeight }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', { 
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { 
          style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + 3 },
          tickValue
        )
      )
    ));

  const AxisLeft = ({ yScale,innerWidth }) =>
    yScale.domain().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
       React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -3, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    circleRadius
  }) =>
    data.map(d => (
      React.createElement( 'circle', {
        className: "mark", cx: xScale(xValue(d)), cy: yScale(yValue(d)), r: circleRadius },
        React.createElement( 'title', null, xValue(d) )
      )
    ));

  const menuHeight = 80;

  const width = 960;
  const height = 500 - menuHeight;
  const margin = { top: 20, right: 30, bottom: 65, left: 90 };
  const xAxisLabelOffset = 50;
  const yAxisLabelOffset = 45;

  const attrY = [{ value: 'month', Label: 'Month' }];

  const attributes=[
  	{ value: 'Year', label: '1957-2020' },
    { value: 'first_group', label: '1957-1970' },
    { value: 'second_group', label: '1970-1983' },
    { value: 'third_group', label: '1983-1996' },
    { value: 'fourth_group', label: '1996-2009' },
    { value: 'fifth_group', label: '2009-2020' },
  ];

  const getLabel = (value) => {
    for (let i = 0; i < attributes.length; i++) {
      if (attributes[i].value == value) {
        return attributes[i].label;
      }
    }
  };

  const App = () => {
    const data = useData();
    
    //console.log(data);

    const initialXAttribute = 'Year';
    const [xAttribute, setXAttribute] = React$1.useState(initialXAttribute);

    //const xValue = d => d.Year;
    const xValue = d => d[xAttribute];
    const xAxisLabel = getLabel(xAttribute);

    const yValue = (d) => d.Month;
    const yAxisLabel = 'Month';

    //console.log(yAttribute);
    //console.log(yAxisLabel);

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;
    
    
    const circleRadius=3;

    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth]);
      
    const yScale = d3.scaleBand()
      .domain([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])
      .range([0, innerHeight]);

    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menus-container" },
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "X"),
          React$1__default.createElement( ReactDropdown, {
            options: attributes, value: xAttribute, onChange: ({ value }) => setXAttribute(value) }),
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Y"),
          React$1__default.createElement( ReactDropdown, { options: attrY, value: "Month" })
        ),

        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickOffset: 5 }),

            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${
              innerHeight / 2
            }) rotate(-90)` },
              yAxisLabel
            ),

            React$1__default.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 5 }),

            React$1__default.createElement( 'text', {
              className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
              xAxisLabel
            ),

            React$1__default.createElement( Marks, {
              data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, circleRadius: circleRadius })
          )
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,